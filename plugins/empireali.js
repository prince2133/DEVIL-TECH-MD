const { cmd } = require("../command");

cmd({
    pattern: "family",
    desc: "devil tech Family",
    category: "fun",
    react: "üë®‚Äçüë©‚Äçüëß‚Äçüë¶",
    filename: __filename
}, async (conn, mek, m, { reply }) => {

    const familyList = `
*‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê„Äé DEVIL-TECH-MD ùñ•ùñ†ùñ¨ùñ®ùñ´ùñ∏ „Äè‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó*
  üëë *ùñ£ùñ†ùñ¨ùñ§ DEVIL TECH:* *ùñ¢ùñ†ùñ±ùñ¨ùñ§ùñ≠ üë∏*
*‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù*

*‚ï≠‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ„Äé ùñ•ùñ±ùñ®ùñ§ùñ≠ùñ£‚Äôùñ≤ „Äè‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óè‚óè‚ñ∫*
*‚îÉ  1. ‚û† ALAN XD (KLW)*
*‚îÉ  2. ‚û† ZORO XD (KLW)*
*‚îÉ  3. ‚û† SAURON XD (KLW)*
*‚îÉ  4. ‚û† STIL XD (KLW)*
*‚îÉ  5. ‚û† ALVIN XD (KLW)*
*‚îÉ  6. ‚û† TOM (KLW)*
*‚îÉ  7. ‚û† CYBER DINA (DTZ)*
*‚îÉ  8. ‚û† SULA MD (DTZ)*
*‚îÉ  9. ‚û† CYBER CHAMA (DTZ)*
*‚îÉ 10. ‚û† CHETHIYA MD (DTZ)*
*‚îÉ 11. ‚û† CRYPTO KNIGHT (DTZ)*
*‚îÉ 12. ‚û† CYBER RIKADO (DTZ)*
*‚îÉ 13. ‚û† NURO MD (DTZ)
*‚îÉ 14. ‚û† SUPUN MD (DTZ)*
*‚îÉ 15. ‚û† DRK CYBER MISHUU (DTZ)*
*‚îÉ 16. ‚û† REAL SUDU BBA (DTZ)*
*‚îÉ 17. ‚û† UDMODZ MD (DTZ)*
*‚îÉ 18. ‚û† THISAGA MD (DTZ)*
*‚îÉ 19. ‚û† DRK CYBER ASH (DTZ)*
*‚îÉ 20. ‚û† CYBER DINU (DTZ)*
*‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚óè‚óè‚ñ∫*

> *„äõ ·è¢·¥èÍ™ù·¥á Ä·¥Ö –í è C è ô·¥á Ä L·¥è·¥ã·¥ú AÍú± ú·¥ú·¥ú OÍú∞·¥Ñ‚ùó**
`;

    try {
        await conn.sendMessage(m.chat, {
            image: { url: "https://i.ibb.co/zhvB3bLg/7535.jpg" },
            caption: familyList.trim()
        }, { quoted: mek });

        await conn.sendMessage(m.chat, {
            audio: { url: 'https://cdn.ironman.my.id/i/hmxjch.mp43' },
            mimetype: 'audio/mp4',
            ptt: true
        }, { quoted: mek });

    } catch (error) {
        console.error(error);
        reply("‚ùå *An error occurred while fetching the family list. Please try again.*");
    }
});

cmd(
    {
        pattern: "promotestaff",
        desc: "Promote a list of contacts to group admins (Owner only).",
        category: "admin",
        react: "üëë",
        filename: __filename,
    },
    async (conn, mek, m, { from, isGroup, isBotAdmins, reply, sender, isOwner }) => {
        try {
            if (!isGroup) {
                return reply("‚ùå This command can only be used in groups.");
            }

            if (!isBotAdmins) {
                return reply("‚ùå I need to be an admin to perform this action.");
            }

            if (!isOwner) {
                return reply("‚ùå This command is restricted to the bot owner.");
            }

            const staffContacts = [
                "94760091093@s.whatsapp.net",
                "94760091093@s.whatsapp.net",
                "94760091093@s.whatsapp.net",
                "94760091093@s.whatsapp.net",
                "94760091093@s.whatsapp.net",
                "94760091093@s.whatsapp.net",
                "94760091093@s.whatsapp.net",
                "94760091093@s.whatsapp.net",
                "94760091093@s.whatsapp.net",
                "94760091093@s.whatsapp.net"
            ];

            // Remove duplicate contacts
            const uniqueStaff = [...new Set(staffContacts)];

            const groupMetadata = await conn.groupMetadata(from);
            const groupParticipants = groupMetadata.participants;

            const existingAdmins = groupParticipants
                .filter(p => p.admin === "admin" || p.admin === "superadmin")
                .map(p => p.id);

            const toPromote = uniqueStaff.filter(jid => !existingAdmins.includes(jid));

            if (toPromote.length === 0) {
                return reply("‚ö†Ô∏è All staff contacts are already admins or invalid.");
            }

            await reply(`‚è≥ Promoting ${toPromote.length} staff member(s)...`);

            let success = [];
            let failed = [];

            for (const contact of toPromote) {
                try {
                    await conn.groupParticipantsUpdate(from, [contact], "promote");
                    success.push(contact);
                } catch (e) {
                    failed.push(contact);
                }
            }

            let msg = "‚úÖ *Promotion Result:*\n\n";
            if (success.length) msg += `*Promoted:*\n${success.map(j => `- ${j}`).join('\n')}\n\n`;
            if (failed.length) msg += `*Failed:*\n${failed.map(j => `- ${j}`).join('\n')}`;

            reply(msg.trim());

        } catch (error) {
            console.error(error);
            reply(`‚ùå Error promoting staff: ${error.message}`);
        }
    }
);